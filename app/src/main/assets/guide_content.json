[
  {
    "title": "Основы Android",
    "sections": [
      {
        "title": "Жизненный цикл Activity",
        "topics": [
          {
            "title": "onCreate()",
            "content": "Метод <b>onCreate()</b> вызывается при первом создании <i>Activity</i>. Здесь вы должны инициализировать основные компоненты вашего интерфейса, такие как <b>findViewById()</b>, и загрузить необходимые данные."
          },
          {
            "title": "onStart()",
            "content": "Метод <b>onStart()</b> вызывается, когда Activity становится видимой для пользователя.  В этом методе вы можете запустить анимацию или другие действия, которые должны выполняться, когда Activity находится на переднем плане."
          },
          {
            "title": "onResume()",
            "content": "Метод <b>onResume()</b> вызывается, когда Activity возобновляет свою работу после паузы.  В этом методе вы должны зарегистрировать слушателей или другие действия, которые должны выполняться, когда Activity находится в активном состоянии."
          },
          {
            "title": "onPause()",
            "content": "Метод <b>onPause()</b> вызывается, когда Activity теряет фокус, например, когда открывается другое Activity.  В этом методе вы должны освободить ресурсы и сохранить состояние Activity."
          },
          {
            "title": "onStop()",
            "content": "Метод <b>onStop()</b> вызывается, когда Activity больше не видна пользователю.  В этом методе вы должны освободить ресурсы и завершить работу Activity."
          },
          {
            "title": "onDestroy()",
            "content": "Метод <b>onDestroy()</b> вызывается, когда Activity уничтожается системой.  В этом методе вы должны освободить все ресурсы и завершить работу Activity."
          }
        ]
      },
      {
        "title": "Layouts и Views",
        "topics": [
          {
            "title": "LinearLayout",
            "content": "<b>LinearLayout</b> располагает View-элементы в одну линию - горизонтально или вертикально. Вы можете указать ориентацию с помощью атрибута <code>android:orientation</code>.  Используется для простого упорядочивания элементов."
          },
          {
            "title": "RelativeLayout",
            "content": "<b>RelativeLayout</b> позволяет располагать View-элементы относительно друг друга или относительно границ экрана. Это дает большую гибкость при создании сложных макетов.  Элементы можно позиционировать относительно других элементов или краев родительского контейнера."
          },
          {
            "title": "ConstraintLayout",
            "content": "<b>ConstraintLayout</b> - это гибкий макет, который позволяет создавать сложные пользовательские интерфейсы с помощью ограничений (constraints). Он является более мощной альтернативой <i>RelativeLayout</i>. Используйте его для создания адаптивных UI."
          }
        ]
      },
      {
        "title": "View Binding",
        "topics": [
          {
            "title": "Включение View Binding",
            "content": "Для использования <b>View Binding</b> необходимо включить его в файле <code>build.gradle</code> модуля: <code>android { ... viewBinding { enabled = true } }</code>. Это упрощает доступ к View-элементам в макете."
          },
          {
            "title": "Использование View Binding",
            "content": "После включения View Binding, система автоматически сгенерирует класс для каждого макета.  Вы можете использовать этот класс для доступа к View-элементам, избегая использования <b>findViewById()</b>. Например: <code>binding.textView.setText(\"Hello\")</code>."
          }
        ]
      }
    ]
  },
  {
    "title": "Работа с данными",
    "sections": [
      {
        "title": "SharedPreferences",
        "topics": [
          {
            "title": "Сохранение данных",
            "content": "<b>SharedPreferences</b> - простой способ сохранения небольших объемов данных в формате ключ-значение.  Вы можете использовать методы <code>edit()</code>, <code>putInt()</code>, <code>putString()</code> и т.д. для сохранения данных. Данные хранятся в XML-файле в private directory вашего приложения."
          },
          {
            "title": "Чтение данных",
            "content": "Для чтения данных из <b>SharedPreferences</b> используйте методы <code>getInt()</code>, <code>getString()</code> и т.д.  Вам нужно указать ключ, чтобы получить соответствующее значение."
          }
        ]
      },
      {
        "title": "SQLite",
        "topics": [
          {
            "title": "Создание базы данных",
            "content": "Для работы с <b>SQLite</b> вам потребуется создать класс, наследующий от <b>SQLiteOpenHelper</b>.  Этот класс отвечает за создание и обновление базы данных."
          },
          {
            "title": "Запросы к базе данных",
            "content": "Вы можете выполнять запросы к базе данных с помощью методов <b>SQLiteDatabase</b>, таких как <code>insert()</code>, <code>query()</code>, <code>update()</code>, <code>delete()</code> и т.д."
          }
        ]
      }
    ]
  },
  {
    "title": "Работа с сетью",
    "sections": [
      {
        "title": "Retrofit",
        "topics": [
          {
            "title": "Настройка Retrofit",
            "content": "Для использования <b>Retrofit</b> вам необходимо создать интерфейс, определяющий API.  Затем вы создаете экземпляр Retrofit, указав базовый URL и используемый конвертер."
          },
          {
            "title": "Выполнение запросов",
            "content": "Вы можете выполнять запросы к API, вызывая методы интерфейса, созданного с помощью <b>Retrofit</b>.  Вы можете использовать аннотации, такие как <code>@GET</code>, <code>@POST</code>, чтобы указать тип запроса и URL."
          }
        ]
      }
    ]
  }
]